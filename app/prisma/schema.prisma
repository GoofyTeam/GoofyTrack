generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @db.VarChar(50)
  email      String      @unique(map: "email") @db.VarChar(100)
  password   String      @db.VarChar(255)
  role_id    Int
  avatarUrl  String?     @map("avatar_url") @db.VarChar(255)
  bio        String?     @db.Text
  created_at DateTime    @default(now()) @db.Timestamp
  updated_at DateTime    @default(now()) @db.Timestamp
  favorites  favorites[]
  feedback   feedback[]
  talks      talks[]
  roles      roles       @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "users_role_id_fk")

  @@index([role_id], map: "role_id")
  @@map("users")
}

model favorites {
  id         Int      @id @default(autoincrement())
  user_id    Int
  talk_id    Int
  created_at DateTime @default(now()) @db.Timestamp
  talks      talks    @relation(fields: [talk_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "favorites_talk_id_fk")
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "favorites_user_id_fk")

  @@unique([user_id, talk_id], map: "favorites_user_id_talk_id_unique")
  @@index([talk_id], map: "favorites_talk_id_idx")
}

model feedback {
  id         Int      @id @default(autoincrement())
  user_id    Int
  talk_id    Int
  rating     Boolean
  comment    String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp
  talks      talks    @relation(fields: [talk_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "feedback_talk_id_fk")
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "feedback_user_id_fk")

  @@unique([user_id, talk_id], map: "feedback_user_id_talk_id_unique")
  @@index([talk_id], map: "feedback_talk_id_idx")
}

model roles {
  id         Int      @id @default(autoincrement())
  name       String   @unique(map: "roles_name_unique") @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp
  users      User[]
}

model rooms {
  id          Int         @id @default(autoincrement())
  name        String      @unique(map: "rooms_name_unique") @db.VarChar(100)
  capacity    Int         @default(0)
  description String?     @db.Text
  created_at  DateTime    @default(now()) @db.Timestamp
  schedules   schedules[]
}

model schedules {
  id         Int      @id @default(autoincrement())
  talk_id    Int      @unique(map: "schedules_talk_id_unique")
  room_id    Int
  start_time DateTime @db.Timestamp
  end_time   DateTime @db.Timestamp
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @default(now()) @db.Timestamp
  rooms      rooms    @relation(fields: [room_id], references: [id], onUpdate: Restrict, map: "schedules_room_id_fk")
  talks      talks    @relation(fields: [talk_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "schedules_talk_id_fk")

  @@index([room_id], map: "room_id")
  @@index([start_time], map: "start_time")
}

model subjects {
  id         Int      @id @default(autoincrement())
  name       String   @unique(map: "subjects_name_unique") @db.VarChar(100)
  created_at DateTime @default(now()) @db.Timestamp
  talks      talks[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model talks {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(200)
  description String       @db.Text
  speaker_id  Int
  subject_id  Int
  duration    Int
  level       talks_level  @default(intermediate)
  status      talks_status @default(pending)
  created_at  DateTime     @default(now()) @db.Timestamp
  updated_at  DateTime     @default(now()) @db.Timestamp
  favorites   favorites[]
  feedback    feedback[]
  schedules   schedules?
  users       User         @relation(fields: [speaker_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "talks_speaker_id_fk")
  subjects    subjects     @relation(fields: [subject_id], references: [id], onUpdate: Restrict, map: "talks_subject_id_fk")

  @@index([speaker_id], map: "speaker_id")
  @@index([status], map: "status")
  @@index([subject_id], map: "subject_id")
}

enum talks_level {
  beginner
  intermediate
  advanced
  expert
}

enum talks_status {
  pending
  accepted
  rejected
  scheduled
}